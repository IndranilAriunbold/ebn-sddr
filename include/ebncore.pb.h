// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ebncore.proto

#ifndef PROTOBUF_ebncore_2eproto__INCLUDED
#define PROTOBUF_ebncore_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace EbNCore {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ebncore_2eproto();
void protobuf_AssignDesc_ebncore_2eproto();
void protobuf_ShutdownFile_ebncore_2eproto();

class Event;
class Event_LinkabilityEvent;
class Event_LinkabilityEvent_Entry;
class Event_EncounterEvent;
class Event_EncounterEvent_RSSIEvent;
class Event_SleepEvent;

enum Event_LinkabilityEvent_Entry_ModeType {
  Event_LinkabilityEvent_Entry_ModeType_Listen = 0,
  Event_LinkabilityEvent_Entry_ModeType_AdvertAndListen = 1
};
bool Event_LinkabilityEvent_Entry_ModeType_IsValid(int value);
const Event_LinkabilityEvent_Entry_ModeType Event_LinkabilityEvent_Entry_ModeType_ModeType_MIN = Event_LinkabilityEvent_Entry_ModeType_Listen;
const Event_LinkabilityEvent_Entry_ModeType Event_LinkabilityEvent_Entry_ModeType_ModeType_MAX = Event_LinkabilityEvent_Entry_ModeType_AdvertAndListen;
const int Event_LinkabilityEvent_Entry_ModeType_ModeType_ARRAYSIZE = Event_LinkabilityEvent_Entry_ModeType_ModeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Event_LinkabilityEvent_Entry_ModeType_descriptor();
inline const ::std::string& Event_LinkabilityEvent_Entry_ModeType_Name(Event_LinkabilityEvent_Entry_ModeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Event_LinkabilityEvent_Entry_ModeType_descriptor(), value);
}
inline bool Event_LinkabilityEvent_Entry_ModeType_Parse(
    const ::std::string& name, Event_LinkabilityEvent_Entry_ModeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Event_LinkabilityEvent_Entry_ModeType>(
    Event_LinkabilityEvent_Entry_ModeType_descriptor(), name, value);
}
enum Event_EncounterEvent_EventType {
  Event_EncounterEvent_EventType_UnconfirmedStart = 3,
  Event_EncounterEvent_EventType_Start = 0,
  Event_EncounterEvent_EventType_Update = 1,
  Event_EncounterEvent_EventType_End = 2
};
bool Event_EncounterEvent_EventType_IsValid(int value);
const Event_EncounterEvent_EventType Event_EncounterEvent_EventType_EventType_MIN = Event_EncounterEvent_EventType_Start;
const Event_EncounterEvent_EventType Event_EncounterEvent_EventType_EventType_MAX = Event_EncounterEvent_EventType_UnconfirmedStart;
const int Event_EncounterEvent_EventType_EventType_ARRAYSIZE = Event_EncounterEvent_EventType_EventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Event_EncounterEvent_EventType_descriptor();
inline const ::std::string& Event_EncounterEvent_EventType_Name(Event_EncounterEvent_EventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Event_EncounterEvent_EventType_descriptor(), value);
}
inline bool Event_EncounterEvent_EventType_Parse(
    const ::std::string& name, Event_EncounterEvent_EventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Event_EncounterEvent_EventType>(
    Event_EncounterEvent_EventType_descriptor(), name, value);
}
// ===================================================================

class Event_LinkabilityEvent_Entry : public ::google::protobuf::Message {
 public:
  Event_LinkabilityEvent_Entry();
  virtual ~Event_LinkabilityEvent_Entry();

  Event_LinkabilityEvent_Entry(const Event_LinkabilityEvent_Entry& from);

  inline Event_LinkabilityEvent_Entry& operator=(const Event_LinkabilityEvent_Entry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event_LinkabilityEvent_Entry& default_instance();

  void Swap(Event_LinkabilityEvent_Entry* other);

  // implements Message ----------------------------------------------

  Event_LinkabilityEvent_Entry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event_LinkabilityEvent_Entry& from);
  void MergeFrom(const Event_LinkabilityEvent_Entry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Event_LinkabilityEvent_Entry_ModeType ModeType;
  static const ModeType Listen = Event_LinkabilityEvent_Entry_ModeType_Listen;
  static const ModeType AdvertAndListen = Event_LinkabilityEvent_Entry_ModeType_AdvertAndListen;
  static inline bool ModeType_IsValid(int value) {
    return Event_LinkabilityEvent_Entry_ModeType_IsValid(value);
  }
  static const ModeType ModeType_MIN =
    Event_LinkabilityEvent_Entry_ModeType_ModeType_MIN;
  static const ModeType ModeType_MAX =
    Event_LinkabilityEvent_Entry_ModeType_ModeType_MAX;
  static const int ModeType_ARRAYSIZE =
    Event_LinkabilityEvent_Entry_ModeType_ModeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ModeType_descriptor() {
    return Event_LinkabilityEvent_Entry_ModeType_descriptor();
  }
  static inline const ::std::string& ModeType_Name(ModeType value) {
    return Event_LinkabilityEvent_Entry_ModeType_Name(value);
  }
  static inline bool ModeType_Parse(const ::std::string& name,
      ModeType* value) {
    return Event_LinkabilityEvent_Entry_ModeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required bytes linkValue = 1;
  inline bool has_linkvalue() const;
  inline void clear_linkvalue();
  static const int kLinkValueFieldNumber = 1;
  inline const ::std::string& linkvalue() const;
  inline void set_linkvalue(const ::std::string& value);
  inline void set_linkvalue(const char* value);
  inline void set_linkvalue(const void* value, size_t size);
  inline ::std::string* mutable_linkvalue();
  inline ::std::string* release_linkvalue();
  inline void set_allocated_linkvalue(::std::string* linkvalue);

  // required .EbNCore.Event.LinkabilityEvent.Entry.ModeType mode = 2;
  inline bool has_mode() const;
  inline void clear_mode();
  static const int kModeFieldNumber = 2;
  inline ::EbNCore::Event_LinkabilityEvent_Entry_ModeType mode() const;
  inline void set_mode(::EbNCore::Event_LinkabilityEvent_Entry_ModeType value);

  // @@protoc_insertion_point(class_scope:EbNCore.Event.LinkabilityEvent.Entry)
 private:
  inline void set_has_linkvalue();
  inline void clear_has_linkvalue();
  inline void set_has_mode();
  inline void clear_has_mode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* linkvalue_;
  int mode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ebncore_2eproto();
  friend void protobuf_AssignDesc_ebncore_2eproto();
  friend void protobuf_ShutdownFile_ebncore_2eproto();

  void InitAsDefaultInstance();
  static Event_LinkabilityEvent_Entry* default_instance_;
};
// -------------------------------------------------------------------

class Event_LinkabilityEvent : public ::google::protobuf::Message {
 public:
  Event_LinkabilityEvent();
  virtual ~Event_LinkabilityEvent();

  Event_LinkabilityEvent(const Event_LinkabilityEvent& from);

  inline Event_LinkabilityEvent& operator=(const Event_LinkabilityEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event_LinkabilityEvent& default_instance();

  void Swap(Event_LinkabilityEvent* other);

  // implements Message ----------------------------------------------

  Event_LinkabilityEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event_LinkabilityEvent& from);
  void MergeFrom(const Event_LinkabilityEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Event_LinkabilityEvent_Entry Entry;

  // accessors -------------------------------------------------------

  // repeated .EbNCore.Event.LinkabilityEvent.Entry entries = 1;
  inline int entries_size() const;
  inline void clear_entries();
  static const int kEntriesFieldNumber = 1;
  inline const ::EbNCore::Event_LinkabilityEvent_Entry& entries(int index) const;
  inline ::EbNCore::Event_LinkabilityEvent_Entry* mutable_entries(int index);
  inline ::EbNCore::Event_LinkabilityEvent_Entry* add_entries();
  inline const ::google::protobuf::RepeatedPtrField< ::EbNCore::Event_LinkabilityEvent_Entry >&
      entries() const;
  inline ::google::protobuf::RepeatedPtrField< ::EbNCore::Event_LinkabilityEvent_Entry >*
      mutable_entries();

  // @@protoc_insertion_point(class_scope:EbNCore.Event.LinkabilityEvent)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::EbNCore::Event_LinkabilityEvent_Entry > entries_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ebncore_2eproto();
  friend void protobuf_AssignDesc_ebncore_2eproto();
  friend void protobuf_ShutdownFile_ebncore_2eproto();

  void InitAsDefaultInstance();
  static Event_LinkabilityEvent* default_instance_;
};
// -------------------------------------------------------------------

class Event_EncounterEvent_RSSIEvent : public ::google::protobuf::Message {
 public:
  Event_EncounterEvent_RSSIEvent();
  virtual ~Event_EncounterEvent_RSSIEvent();

  Event_EncounterEvent_RSSIEvent(const Event_EncounterEvent_RSSIEvent& from);

  inline Event_EncounterEvent_RSSIEvent& operator=(const Event_EncounterEvent_RSSIEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event_EncounterEvent_RSSIEvent& default_instance();

  void Swap(Event_EncounterEvent_RSSIEvent* other);

  // implements Message ----------------------------------------------

  Event_EncounterEvent_RSSIEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event_EncounterEvent_RSSIEvent& from);
  void MergeFrom(const Event_EncounterEvent_RSSIEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // required sint32 rssi = 2;
  inline bool has_rssi() const;
  inline void clear_rssi();
  static const int kRssiFieldNumber = 2;
  inline ::google::protobuf::int32 rssi() const;
  inline void set_rssi(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:EbNCore.Event.EncounterEvent.RSSIEvent)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_rssi();
  inline void clear_has_rssi();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 time_;
  ::google::protobuf::int32 rssi_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ebncore_2eproto();
  friend void protobuf_AssignDesc_ebncore_2eproto();
  friend void protobuf_ShutdownFile_ebncore_2eproto();

  void InitAsDefaultInstance();
  static Event_EncounterEvent_RSSIEvent* default_instance_;
};
// -------------------------------------------------------------------

class Event_EncounterEvent : public ::google::protobuf::Message {
 public:
  Event_EncounterEvent();
  virtual ~Event_EncounterEvent();

  Event_EncounterEvent(const Event_EncounterEvent& from);

  inline Event_EncounterEvent& operator=(const Event_EncounterEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event_EncounterEvent& default_instance();

  void Swap(Event_EncounterEvent* other);

  // implements Message ----------------------------------------------

  Event_EncounterEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event_EncounterEvent& from);
  void MergeFrom(const Event_EncounterEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Event_EncounterEvent_RSSIEvent RSSIEvent;

  typedef Event_EncounterEvent_EventType EventType;
  static const EventType UnconfirmedStart = Event_EncounterEvent_EventType_UnconfirmedStart;
  static const EventType Start = Event_EncounterEvent_EventType_Start;
  static const EventType Update = Event_EncounterEvent_EventType_Update;
  static const EventType End = Event_EncounterEvent_EventType_End;
  static inline bool EventType_IsValid(int value) {
    return Event_EncounterEvent_EventType_IsValid(value);
  }
  static const EventType EventType_MIN =
    Event_EncounterEvent_EventType_EventType_MIN;
  static const EventType EventType_MAX =
    Event_EncounterEvent_EventType_EventType_MAX;
  static const int EventType_ARRAYSIZE =
    Event_EncounterEvent_EventType_EventType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EventType_descriptor() {
    return Event_EncounterEvent_EventType_descriptor();
  }
  static inline const ::std::string& EventType_Name(EventType value) {
    return Event_EncounterEvent_EventType_Name(value);
  }
  static inline bool EventType_Parse(const ::std::string& name,
      EventType* value) {
    return Event_EncounterEvent_EventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .EbNCore.Event.EncounterEvent.EventType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::EbNCore::Event_EncounterEvent_EventType type() const;
  inline void set_type(::EbNCore::Event_EncounterEvent_EventType value);

  // required uint64 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // required int32 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string address = 4;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 4;
  inline const ::std::string& address() const;
  inline void set_address(const ::std::string& value);
  inline void set_address(const char* value);
  inline void set_address(const char* value, size_t size);
  inline ::std::string* mutable_address();
  inline ::std::string* release_address();
  inline void set_allocated_address(::std::string* address);

  // repeated .EbNCore.Event.EncounterEvent.RSSIEvent rssiEvents = 5;
  inline int rssievents_size() const;
  inline void clear_rssievents();
  static const int kRssiEventsFieldNumber = 5;
  inline const ::EbNCore::Event_EncounterEvent_RSSIEvent& rssievents(int index) const;
  inline ::EbNCore::Event_EncounterEvent_RSSIEvent* mutable_rssievents(int index);
  inline ::EbNCore::Event_EncounterEvent_RSSIEvent* add_rssievents();
  inline const ::google::protobuf::RepeatedPtrField< ::EbNCore::Event_EncounterEvent_RSSIEvent >&
      rssievents() const;
  inline ::google::protobuf::RepeatedPtrField< ::EbNCore::Event_EncounterEvent_RSSIEvent >*
      mutable_rssievents();

  // repeated bytes matchingSet = 6;
  inline int matchingset_size() const;
  inline void clear_matchingset();
  static const int kMatchingSetFieldNumber = 6;
  inline const ::std::string& matchingset(int index) const;
  inline ::std::string* mutable_matchingset(int index);
  inline void set_matchingset(int index, const ::std::string& value);
  inline void set_matchingset(int index, const char* value);
  inline void set_matchingset(int index, const void* value, size_t size);
  inline ::std::string* add_matchingset();
  inline void add_matchingset(const ::std::string& value);
  inline void add_matchingset(const char* value);
  inline void add_matchingset(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& matchingset() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_matchingset();

  // repeated bytes sharedSecrets = 7;
  inline int sharedsecrets_size() const;
  inline void clear_sharedsecrets();
  static const int kSharedSecretsFieldNumber = 7;
  inline const ::std::string& sharedsecrets(int index) const;
  inline ::std::string* mutable_sharedsecrets(int index);
  inline void set_sharedsecrets(int index, const ::std::string& value);
  inline void set_sharedsecrets(int index, const char* value);
  inline void set_sharedsecrets(int index, const void* value, size_t size);
  inline ::std::string* add_sharedsecrets();
  inline void add_sharedsecrets(const ::std::string& value);
  inline void add_sharedsecrets(const char* value);
  inline void add_sharedsecrets(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& sharedsecrets() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_sharedsecrets();

  // required uint64 pkid = 8;
  inline bool has_pkid() const;
  inline void clear_pkid();
  static const int kPkidFieldNumber = 8;
  inline ::google::protobuf::uint64 pkid() const;
  inline void set_pkid(::google::protobuf::uint64 value);

  // required bool matchingSetUpdated = 9;
  inline bool has_matchingsetupdated() const;
  inline void clear_matchingsetupdated();
  static const int kMatchingSetUpdatedFieldNumber = 9;
  inline bool matchingsetupdated() const;
  inline void set_matchingsetupdated(bool value);

  // @@protoc_insertion_point(class_scope:EbNCore.Event.EncounterEvent)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_address();
  inline void clear_has_address();
  inline void set_has_pkid();
  inline void clear_has_pkid();
  inline void set_has_matchingsetupdated();
  inline void clear_has_matchingsetupdated();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 time_;
  int type_;
  ::google::protobuf::int32 id_;
  ::std::string* address_;
  ::google::protobuf::RepeatedPtrField< ::EbNCore::Event_EncounterEvent_RSSIEvent > rssievents_;
  ::google::protobuf::RepeatedPtrField< ::std::string> matchingset_;
  ::google::protobuf::RepeatedPtrField< ::std::string> sharedsecrets_;
  ::google::protobuf::uint64 pkid_;
  bool matchingsetupdated_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_ebncore_2eproto();
  friend void protobuf_AssignDesc_ebncore_2eproto();
  friend void protobuf_ShutdownFile_ebncore_2eproto();

  void InitAsDefaultInstance();
  static Event_EncounterEvent* default_instance_;
};
// -------------------------------------------------------------------

class Event_SleepEvent : public ::google::protobuf::Message {
 public:
  Event_SleepEvent();
  virtual ~Event_SleepEvent();

  Event_SleepEvent(const Event_SleepEvent& from);

  inline Event_SleepEvent& operator=(const Event_SleepEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event_SleepEvent& default_instance();

  void Swap(Event_SleepEvent* other);

  // implements Message ----------------------------------------------

  Event_SleepEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event_SleepEvent& from);
  void MergeFrom(const Event_SleepEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 duration = 1;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 1;
  inline ::google::protobuf::uint64 duration() const;
  inline void set_duration(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:EbNCore.Event.SleepEvent)
 private:
  inline void set_has_duration();
  inline void clear_has_duration();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 duration_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ebncore_2eproto();
  friend void protobuf_AssignDesc_ebncore_2eproto();
  friend void protobuf_ShutdownFile_ebncore_2eproto();

  void InitAsDefaultInstance();
  static Event_SleepEvent* default_instance_;
};
// -------------------------------------------------------------------

class Event : public ::google::protobuf::Message {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event& default_instance();

  void Swap(Event* other);

  // implements Message ----------------------------------------------

  Event* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Event_LinkabilityEvent LinkabilityEvent;
  typedef Event_EncounterEvent EncounterEvent;
  typedef Event_SleepEvent SleepEvent;

  // accessors -------------------------------------------------------

  // optional .EbNCore.Event.LinkabilityEvent linkabilityEvent = 1;
  inline bool has_linkabilityevent() const;
  inline void clear_linkabilityevent();
  static const int kLinkabilityEventFieldNumber = 1;
  inline const ::EbNCore::Event_LinkabilityEvent& linkabilityevent() const;
  inline ::EbNCore::Event_LinkabilityEvent* mutable_linkabilityevent();
  inline ::EbNCore::Event_LinkabilityEvent* release_linkabilityevent();
  inline void set_allocated_linkabilityevent(::EbNCore::Event_LinkabilityEvent* linkabilityevent);

  // optional .EbNCore.Event.EncounterEvent encounterEvent = 2;
  inline bool has_encounterevent() const;
  inline void clear_encounterevent();
  static const int kEncounterEventFieldNumber = 2;
  inline const ::EbNCore::Event_EncounterEvent& encounterevent() const;
  inline ::EbNCore::Event_EncounterEvent* mutable_encounterevent();
  inline ::EbNCore::Event_EncounterEvent* release_encounterevent();
  inline void set_allocated_encounterevent(::EbNCore::Event_EncounterEvent* encounterevent);

  // optional .EbNCore.Event.SleepEvent sleepEvent = 3;
  inline bool has_sleepevent() const;
  inline void clear_sleepevent();
  static const int kSleepEventFieldNumber = 3;
  inline const ::EbNCore::Event_SleepEvent& sleepevent() const;
  inline ::EbNCore::Event_SleepEvent* mutable_sleepevent();
  inline ::EbNCore::Event_SleepEvent* release_sleepevent();
  inline void set_allocated_sleepevent(::EbNCore::Event_SleepEvent* sleepevent);

  // @@protoc_insertion_point(class_scope:EbNCore.Event)
 private:
  inline void set_has_linkabilityevent();
  inline void clear_has_linkabilityevent();
  inline void set_has_encounterevent();
  inline void clear_has_encounterevent();
  inline void set_has_sleepevent();
  inline void clear_has_sleepevent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::EbNCore::Event_LinkabilityEvent* linkabilityevent_;
  ::EbNCore::Event_EncounterEvent* encounterevent_;
  ::EbNCore::Event_SleepEvent* sleepevent_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ebncore_2eproto();
  friend void protobuf_AssignDesc_ebncore_2eproto();
  friend void protobuf_ShutdownFile_ebncore_2eproto();

  void InitAsDefaultInstance();
  static Event* default_instance_;
};
// ===================================================================


// ===================================================================

// Event_LinkabilityEvent_Entry

// required bytes linkValue = 1;
inline bool Event_LinkabilityEvent_Entry::has_linkvalue() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event_LinkabilityEvent_Entry::set_has_linkvalue() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event_LinkabilityEvent_Entry::clear_has_linkvalue() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event_LinkabilityEvent_Entry::clear_linkvalue() {
  if (linkvalue_ != &::google::protobuf::internal::kEmptyString) {
    linkvalue_->clear();
  }
  clear_has_linkvalue();
}
inline const ::std::string& Event_LinkabilityEvent_Entry::linkvalue() const {
  return *linkvalue_;
}
inline void Event_LinkabilityEvent_Entry::set_linkvalue(const ::std::string& value) {
  set_has_linkvalue();
  if (linkvalue_ == &::google::protobuf::internal::kEmptyString) {
    linkvalue_ = new ::std::string;
  }
  linkvalue_->assign(value);
}
inline void Event_LinkabilityEvent_Entry::set_linkvalue(const char* value) {
  set_has_linkvalue();
  if (linkvalue_ == &::google::protobuf::internal::kEmptyString) {
    linkvalue_ = new ::std::string;
  }
  linkvalue_->assign(value);
}
inline void Event_LinkabilityEvent_Entry::set_linkvalue(const void* value, size_t size) {
  set_has_linkvalue();
  if (linkvalue_ == &::google::protobuf::internal::kEmptyString) {
    linkvalue_ = new ::std::string;
  }
  linkvalue_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Event_LinkabilityEvent_Entry::mutable_linkvalue() {
  set_has_linkvalue();
  if (linkvalue_ == &::google::protobuf::internal::kEmptyString) {
    linkvalue_ = new ::std::string;
  }
  return linkvalue_;
}
inline ::std::string* Event_LinkabilityEvent_Entry::release_linkvalue() {
  clear_has_linkvalue();
  if (linkvalue_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = linkvalue_;
    linkvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Event_LinkabilityEvent_Entry::set_allocated_linkvalue(::std::string* linkvalue) {
  if (linkvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete linkvalue_;
  }
  if (linkvalue) {
    set_has_linkvalue();
    linkvalue_ = linkvalue;
  } else {
    clear_has_linkvalue();
    linkvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .EbNCore.Event.LinkabilityEvent.Entry.ModeType mode = 2;
inline bool Event_LinkabilityEvent_Entry::has_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event_LinkabilityEvent_Entry::set_has_mode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event_LinkabilityEvent_Entry::clear_has_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Event_LinkabilityEvent_Entry::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
inline ::EbNCore::Event_LinkabilityEvent_Entry_ModeType Event_LinkabilityEvent_Entry::mode() const {
  return static_cast< ::EbNCore::Event_LinkabilityEvent_Entry_ModeType >(mode_);
}
inline void Event_LinkabilityEvent_Entry::set_mode(::EbNCore::Event_LinkabilityEvent_Entry_ModeType value) {
  assert(::EbNCore::Event_LinkabilityEvent_Entry_ModeType_IsValid(value));
  set_has_mode();
  mode_ = value;
}

// -------------------------------------------------------------------

// Event_LinkabilityEvent

// repeated .EbNCore.Event.LinkabilityEvent.Entry entries = 1;
inline int Event_LinkabilityEvent::entries_size() const {
  return entries_.size();
}
inline void Event_LinkabilityEvent::clear_entries() {
  entries_.Clear();
}
inline const ::EbNCore::Event_LinkabilityEvent_Entry& Event_LinkabilityEvent::entries(int index) const {
  return entries_.Get(index);
}
inline ::EbNCore::Event_LinkabilityEvent_Entry* Event_LinkabilityEvent::mutable_entries(int index) {
  return entries_.Mutable(index);
}
inline ::EbNCore::Event_LinkabilityEvent_Entry* Event_LinkabilityEvent::add_entries() {
  return entries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EbNCore::Event_LinkabilityEvent_Entry >&
Event_LinkabilityEvent::entries() const {
  return entries_;
}
inline ::google::protobuf::RepeatedPtrField< ::EbNCore::Event_LinkabilityEvent_Entry >*
Event_LinkabilityEvent::mutable_entries() {
  return &entries_;
}

// -------------------------------------------------------------------

// Event_EncounterEvent_RSSIEvent

// required uint64 time = 1;
inline bool Event_EncounterEvent_RSSIEvent::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event_EncounterEvent_RSSIEvent::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event_EncounterEvent_RSSIEvent::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event_EncounterEvent_RSSIEvent::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 Event_EncounterEvent_RSSIEvent::time() const {
  return time_;
}
inline void Event_EncounterEvent_RSSIEvent::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
}

// required sint32 rssi = 2;
inline bool Event_EncounterEvent_RSSIEvent::has_rssi() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event_EncounterEvent_RSSIEvent::set_has_rssi() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event_EncounterEvent_RSSIEvent::clear_has_rssi() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Event_EncounterEvent_RSSIEvent::clear_rssi() {
  rssi_ = 0;
  clear_has_rssi();
}
inline ::google::protobuf::int32 Event_EncounterEvent_RSSIEvent::rssi() const {
  return rssi_;
}
inline void Event_EncounterEvent_RSSIEvent::set_rssi(::google::protobuf::int32 value) {
  set_has_rssi();
  rssi_ = value;
}

// -------------------------------------------------------------------

// Event_EncounterEvent

// required .EbNCore.Event.EncounterEvent.EventType type = 1;
inline bool Event_EncounterEvent::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event_EncounterEvent::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event_EncounterEvent::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event_EncounterEvent::clear_type() {
  type_ = 3;
  clear_has_type();
}
inline ::EbNCore::Event_EncounterEvent_EventType Event_EncounterEvent::type() const {
  return static_cast< ::EbNCore::Event_EncounterEvent_EventType >(type_);
}
inline void Event_EncounterEvent::set_type(::EbNCore::Event_EncounterEvent_EventType value) {
  assert(::EbNCore::Event_EncounterEvent_EventType_IsValid(value));
  set_has_type();
  type_ = value;
}

// required uint64 time = 2;
inline bool Event_EncounterEvent::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event_EncounterEvent::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event_EncounterEvent::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Event_EncounterEvent::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 Event_EncounterEvent::time() const {
  return time_;
}
inline void Event_EncounterEvent::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
}

// required int32 id = 3;
inline bool Event_EncounterEvent::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Event_EncounterEvent::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Event_EncounterEvent::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Event_EncounterEvent::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Event_EncounterEvent::id() const {
  return id_;
}
inline void Event_EncounterEvent::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string address = 4;
inline bool Event_EncounterEvent::has_address() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Event_EncounterEvent::set_has_address() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Event_EncounterEvent::clear_has_address() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Event_EncounterEvent::clear_address() {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    address_->clear();
  }
  clear_has_address();
}
inline const ::std::string& Event_EncounterEvent::address() const {
  return *address_;
}
inline void Event_EncounterEvent::set_address(const ::std::string& value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void Event_EncounterEvent::set_address(const char* value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void Event_EncounterEvent::set_address(const char* value, size_t size) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Event_EncounterEvent::mutable_address() {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  return address_;
}
inline ::std::string* Event_EncounterEvent::release_address() {
  clear_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = address_;
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Event_EncounterEvent::set_allocated_address(::std::string* address) {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (address) {
    set_has_address();
    address_ = address;
  } else {
    clear_has_address();
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .EbNCore.Event.EncounterEvent.RSSIEvent rssiEvents = 5;
inline int Event_EncounterEvent::rssievents_size() const {
  return rssievents_.size();
}
inline void Event_EncounterEvent::clear_rssievents() {
  rssievents_.Clear();
}
inline const ::EbNCore::Event_EncounterEvent_RSSIEvent& Event_EncounterEvent::rssievents(int index) const {
  return rssievents_.Get(index);
}
inline ::EbNCore::Event_EncounterEvent_RSSIEvent* Event_EncounterEvent::mutable_rssievents(int index) {
  return rssievents_.Mutable(index);
}
inline ::EbNCore::Event_EncounterEvent_RSSIEvent* Event_EncounterEvent::add_rssievents() {
  return rssievents_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EbNCore::Event_EncounterEvent_RSSIEvent >&
Event_EncounterEvent::rssievents() const {
  return rssievents_;
}
inline ::google::protobuf::RepeatedPtrField< ::EbNCore::Event_EncounterEvent_RSSIEvent >*
Event_EncounterEvent::mutable_rssievents() {
  return &rssievents_;
}

// repeated bytes matchingSet = 6;
inline int Event_EncounterEvent::matchingset_size() const {
  return matchingset_.size();
}
inline void Event_EncounterEvent::clear_matchingset() {
  matchingset_.Clear();
}
inline const ::std::string& Event_EncounterEvent::matchingset(int index) const {
  return matchingset_.Get(index);
}
inline ::std::string* Event_EncounterEvent::mutable_matchingset(int index) {
  return matchingset_.Mutable(index);
}
inline void Event_EncounterEvent::set_matchingset(int index, const ::std::string& value) {
  matchingset_.Mutable(index)->assign(value);
}
inline void Event_EncounterEvent::set_matchingset(int index, const char* value) {
  matchingset_.Mutable(index)->assign(value);
}
inline void Event_EncounterEvent::set_matchingset(int index, const void* value, size_t size) {
  matchingset_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Event_EncounterEvent::add_matchingset() {
  return matchingset_.Add();
}
inline void Event_EncounterEvent::add_matchingset(const ::std::string& value) {
  matchingset_.Add()->assign(value);
}
inline void Event_EncounterEvent::add_matchingset(const char* value) {
  matchingset_.Add()->assign(value);
}
inline void Event_EncounterEvent::add_matchingset(const void* value, size_t size) {
  matchingset_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Event_EncounterEvent::matchingset() const {
  return matchingset_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Event_EncounterEvent::mutable_matchingset() {
  return &matchingset_;
}

// repeated bytes sharedSecrets = 7;
inline int Event_EncounterEvent::sharedsecrets_size() const {
  return sharedsecrets_.size();
}
inline void Event_EncounterEvent::clear_sharedsecrets() {
  sharedsecrets_.Clear();
}
inline const ::std::string& Event_EncounterEvent::sharedsecrets(int index) const {
  return sharedsecrets_.Get(index);
}
inline ::std::string* Event_EncounterEvent::mutable_sharedsecrets(int index) {
  return sharedsecrets_.Mutable(index);
}
inline void Event_EncounterEvent::set_sharedsecrets(int index, const ::std::string& value) {
  sharedsecrets_.Mutable(index)->assign(value);
}
inline void Event_EncounterEvent::set_sharedsecrets(int index, const char* value) {
  sharedsecrets_.Mutable(index)->assign(value);
}
inline void Event_EncounterEvent::set_sharedsecrets(int index, const void* value, size_t size) {
  sharedsecrets_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Event_EncounterEvent::add_sharedsecrets() {
  return sharedsecrets_.Add();
}
inline void Event_EncounterEvent::add_sharedsecrets(const ::std::string& value) {
  sharedsecrets_.Add()->assign(value);
}
inline void Event_EncounterEvent::add_sharedsecrets(const char* value) {
  sharedsecrets_.Add()->assign(value);
}
inline void Event_EncounterEvent::add_sharedsecrets(const void* value, size_t size) {
  sharedsecrets_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Event_EncounterEvent::sharedsecrets() const {
  return sharedsecrets_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Event_EncounterEvent::mutable_sharedsecrets() {
  return &sharedsecrets_;
}

// required uint64 pkid = 8;
inline bool Event_EncounterEvent::has_pkid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Event_EncounterEvent::set_has_pkid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Event_EncounterEvent::clear_has_pkid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Event_EncounterEvent::clear_pkid() {
  pkid_ = GOOGLE_ULONGLONG(0);
  clear_has_pkid();
}
inline ::google::protobuf::uint64 Event_EncounterEvent::pkid() const {
  return pkid_;
}
inline void Event_EncounterEvent::set_pkid(::google::protobuf::uint64 value) {
  set_has_pkid();
  pkid_ = value;
}

// required bool matchingSetUpdated = 9;
inline bool Event_EncounterEvent::has_matchingsetupdated() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Event_EncounterEvent::set_has_matchingsetupdated() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Event_EncounterEvent::clear_has_matchingsetupdated() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Event_EncounterEvent::clear_matchingsetupdated() {
  matchingsetupdated_ = false;
  clear_has_matchingsetupdated();
}
inline bool Event_EncounterEvent::matchingsetupdated() const {
  return matchingsetupdated_;
}
inline void Event_EncounterEvent::set_matchingsetupdated(bool value) {
  set_has_matchingsetupdated();
  matchingsetupdated_ = value;
}

// -------------------------------------------------------------------

// Event_SleepEvent

// required uint64 duration = 1;
inline bool Event_SleepEvent::has_duration() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event_SleepEvent::set_has_duration() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event_SleepEvent::clear_has_duration() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event_SleepEvent::clear_duration() {
  duration_ = GOOGLE_ULONGLONG(0);
  clear_has_duration();
}
inline ::google::protobuf::uint64 Event_SleepEvent::duration() const {
  return duration_;
}
inline void Event_SleepEvent::set_duration(::google::protobuf::uint64 value) {
  set_has_duration();
  duration_ = value;
}

// -------------------------------------------------------------------

// Event

// optional .EbNCore.Event.LinkabilityEvent linkabilityEvent = 1;
inline bool Event::has_linkabilityevent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event::set_has_linkabilityevent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event::clear_has_linkabilityevent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event::clear_linkabilityevent() {
  if (linkabilityevent_ != NULL) linkabilityevent_->::EbNCore::Event_LinkabilityEvent::Clear();
  clear_has_linkabilityevent();
}
inline const ::EbNCore::Event_LinkabilityEvent& Event::linkabilityevent() const {
  return linkabilityevent_ != NULL ? *linkabilityevent_ : *default_instance_->linkabilityevent_;
}
inline ::EbNCore::Event_LinkabilityEvent* Event::mutable_linkabilityevent() {
  set_has_linkabilityevent();
  if (linkabilityevent_ == NULL) linkabilityevent_ = new ::EbNCore::Event_LinkabilityEvent;
  return linkabilityevent_;
}
inline ::EbNCore::Event_LinkabilityEvent* Event::release_linkabilityevent() {
  clear_has_linkabilityevent();
  ::EbNCore::Event_LinkabilityEvent* temp = linkabilityevent_;
  linkabilityevent_ = NULL;
  return temp;
}
inline void Event::set_allocated_linkabilityevent(::EbNCore::Event_LinkabilityEvent* linkabilityevent) {
  delete linkabilityevent_;
  linkabilityevent_ = linkabilityevent;
  if (linkabilityevent) {
    set_has_linkabilityevent();
  } else {
    clear_has_linkabilityevent();
  }
}

// optional .EbNCore.Event.EncounterEvent encounterEvent = 2;
inline bool Event::has_encounterevent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event::set_has_encounterevent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event::clear_has_encounterevent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Event::clear_encounterevent() {
  if (encounterevent_ != NULL) encounterevent_->::EbNCore::Event_EncounterEvent::Clear();
  clear_has_encounterevent();
}
inline const ::EbNCore::Event_EncounterEvent& Event::encounterevent() const {
  return encounterevent_ != NULL ? *encounterevent_ : *default_instance_->encounterevent_;
}
inline ::EbNCore::Event_EncounterEvent* Event::mutable_encounterevent() {
  set_has_encounterevent();
  if (encounterevent_ == NULL) encounterevent_ = new ::EbNCore::Event_EncounterEvent;
  return encounterevent_;
}
inline ::EbNCore::Event_EncounterEvent* Event::release_encounterevent() {
  clear_has_encounterevent();
  ::EbNCore::Event_EncounterEvent* temp = encounterevent_;
  encounterevent_ = NULL;
  return temp;
}
inline void Event::set_allocated_encounterevent(::EbNCore::Event_EncounterEvent* encounterevent) {
  delete encounterevent_;
  encounterevent_ = encounterevent;
  if (encounterevent) {
    set_has_encounterevent();
  } else {
    clear_has_encounterevent();
  }
}

// optional .EbNCore.Event.SleepEvent sleepEvent = 3;
inline bool Event::has_sleepevent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Event::set_has_sleepevent() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Event::clear_has_sleepevent() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Event::clear_sleepevent() {
  if (sleepevent_ != NULL) sleepevent_->::EbNCore::Event_SleepEvent::Clear();
  clear_has_sleepevent();
}
inline const ::EbNCore::Event_SleepEvent& Event::sleepevent() const {
  return sleepevent_ != NULL ? *sleepevent_ : *default_instance_->sleepevent_;
}
inline ::EbNCore::Event_SleepEvent* Event::mutable_sleepevent() {
  set_has_sleepevent();
  if (sleepevent_ == NULL) sleepevent_ = new ::EbNCore::Event_SleepEvent;
  return sleepevent_;
}
inline ::EbNCore::Event_SleepEvent* Event::release_sleepevent() {
  clear_has_sleepevent();
  ::EbNCore::Event_SleepEvent* temp = sleepevent_;
  sleepevent_ = NULL;
  return temp;
}
inline void Event::set_allocated_sleepevent(::EbNCore::Event_SleepEvent* sleepevent) {
  delete sleepevent_;
  sleepevent_ = sleepevent;
  if (sleepevent) {
    set_has_sleepevent();
  } else {
    clear_has_sleepevent();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace EbNCore

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EbNCore::Event_LinkabilityEvent_Entry_ModeType>() {
  return ::EbNCore::Event_LinkabilityEvent_Entry_ModeType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EbNCore::Event_EncounterEvent_EventType>() {
  return ::EbNCore::Event_EncounterEvent_EventType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ebncore_2eproto__INCLUDED
