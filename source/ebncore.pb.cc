// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ebncore.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ebncore.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace EbNCore {

namespace {

const ::google::protobuf::Descriptor* Event_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Event_reflection_ = NULL;
const ::google::protobuf::Descriptor* Event_LinkabilityEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Event_LinkabilityEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* Event_LinkabilityEvent_Entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Event_LinkabilityEvent_Entry_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Event_LinkabilityEvent_Entry_ModeType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Event_EncounterEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Event_EncounterEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* Event_EncounterEvent_RSSIEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Event_EncounterEvent_RSSIEvent_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Event_EncounterEvent_EventType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Event_SleepEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Event_SleepEvent_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ebncore_2eproto() {
  protobuf_AddDesc_ebncore_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ebncore.proto");
  GOOGLE_CHECK(file != NULL);
  Event_descriptor_ = file->message_type(0);
  static const int Event_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, linkabilityevent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, encounterevent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, sleepevent_),
  };
  Event_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Event_descriptor_,
      Event::default_instance_,
      Event_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Event));
  Event_LinkabilityEvent_descriptor_ = Event_descriptor_->nested_type(0);
  static const int Event_LinkabilityEvent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_LinkabilityEvent, entries_),
  };
  Event_LinkabilityEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Event_LinkabilityEvent_descriptor_,
      Event_LinkabilityEvent::default_instance_,
      Event_LinkabilityEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_LinkabilityEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_LinkabilityEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Event_LinkabilityEvent));
  Event_LinkabilityEvent_Entry_descriptor_ = Event_LinkabilityEvent_descriptor_->nested_type(0);
  static const int Event_LinkabilityEvent_Entry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_LinkabilityEvent_Entry, linkvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_LinkabilityEvent_Entry, mode_),
  };
  Event_LinkabilityEvent_Entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Event_LinkabilityEvent_Entry_descriptor_,
      Event_LinkabilityEvent_Entry::default_instance_,
      Event_LinkabilityEvent_Entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_LinkabilityEvent_Entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_LinkabilityEvent_Entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Event_LinkabilityEvent_Entry));
  Event_LinkabilityEvent_Entry_ModeType_descriptor_ = Event_LinkabilityEvent_Entry_descriptor_->enum_type(0);
  Event_EncounterEvent_descriptor_ = Event_descriptor_->nested_type(1);
  static const int Event_EncounterEvent_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_EncounterEvent, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_EncounterEvent, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_EncounterEvent, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_EncounterEvent, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_EncounterEvent, rssievents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_EncounterEvent, matchingset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_EncounterEvent, sharedsecrets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_EncounterEvent, pkid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_EncounterEvent, matchingsetupdated_),
  };
  Event_EncounterEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Event_EncounterEvent_descriptor_,
      Event_EncounterEvent::default_instance_,
      Event_EncounterEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_EncounterEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_EncounterEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Event_EncounterEvent));
  Event_EncounterEvent_RSSIEvent_descriptor_ = Event_EncounterEvent_descriptor_->nested_type(0);
  static const int Event_EncounterEvent_RSSIEvent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_EncounterEvent_RSSIEvent, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_EncounterEvent_RSSIEvent, rssi_),
  };
  Event_EncounterEvent_RSSIEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Event_EncounterEvent_RSSIEvent_descriptor_,
      Event_EncounterEvent_RSSIEvent::default_instance_,
      Event_EncounterEvent_RSSIEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_EncounterEvent_RSSIEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_EncounterEvent_RSSIEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Event_EncounterEvent_RSSIEvent));
  Event_EncounterEvent_EventType_descriptor_ = Event_EncounterEvent_descriptor_->enum_type(0);
  Event_SleepEvent_descriptor_ = Event_descriptor_->nested_type(2);
  static const int Event_SleepEvent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_SleepEvent, duration_),
  };
  Event_SleepEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Event_SleepEvent_descriptor_,
      Event_SleepEvent::default_instance_,
      Event_SleepEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_SleepEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_SleepEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Event_SleepEvent));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ebncore_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Event_descriptor_, &Event::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Event_LinkabilityEvent_descriptor_, &Event_LinkabilityEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Event_LinkabilityEvent_Entry_descriptor_, &Event_LinkabilityEvent_Entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Event_EncounterEvent_descriptor_, &Event_EncounterEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Event_EncounterEvent_RSSIEvent_descriptor_, &Event_EncounterEvent_RSSIEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Event_SleepEvent_descriptor_, &Event_SleepEvent::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ebncore_2eproto() {
  delete Event::default_instance_;
  delete Event_reflection_;
  delete Event_LinkabilityEvent::default_instance_;
  delete Event_LinkabilityEvent_reflection_;
  delete Event_LinkabilityEvent_Entry::default_instance_;
  delete Event_LinkabilityEvent_Entry_reflection_;
  delete Event_EncounterEvent::default_instance_;
  delete Event_EncounterEvent_reflection_;
  delete Event_EncounterEvent_RSSIEvent::default_instance_;
  delete Event_EncounterEvent_RSSIEvent_reflection_;
  delete Event_SleepEvent::default_instance_;
  delete Event_SleepEvent_reflection_;
}

void protobuf_AddDesc_ebncore_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rebncore.proto\022\007EbNCore\"\221\006\n\005Event\0229\n\020li"
    "nkabilityEvent\030\001 \001(\0132\037.EbNCore.Event.Lin"
    "kabilityEvent\0225\n\016encounterEvent\030\002 \001(\0132\035."
    "EbNCore.Event.EncounterEvent\022-\n\nsleepEve"
    "nt\030\003 \001(\0132\031.EbNCore.Event.SleepEvent\032\322\001\n\020"
    "LinkabilityEvent\0226\n\007entries\030\001 \003(\0132%.EbNC"
    "ore.Event.LinkabilityEvent.Entry\032\205\001\n\005Ent"
    "ry\022\021\n\tlinkValue\030\001 \002(\014\022<\n\004mode\030\002 \002(\0162..Eb"
    "NCore.Event.LinkabilityEvent.Entry.ModeT"
    "ype\"+\n\010ModeType\022\n\n\006Listen\020\000\022\023\n\017AdvertAnd"
    "Listen\020\001\032\361\002\n\016EncounterEvent\0225\n\004type\030\001 \002("
    "\0162\'.EbNCore.Event.EncounterEvent.EventTy"
    "pe\022\014\n\004time\030\002 \002(\004\022\n\n\002id\030\003 \002(\005\022\017\n\007address\030"
    "\004 \002(\t\022;\n\nrssiEvents\030\005 \003(\0132\'.EbNCore.Even"
    "t.EncounterEvent.RSSIEvent\022\023\n\013matchingSe"
    "t\030\006 \003(\014\022\025\n\rsharedSecrets\030\007 \003(\014\022\014\n\004pkid\030\010"
    " \002(\004\022\032\n\022matchingSetUpdated\030\t \002(\010\032\'\n\tRSSI"
    "Event\022\014\n\004time\030\001 \002(\004\022\014\n\004rssi\030\002 \002(\021\"A\n\tEve"
    "ntType\022\024\n\020UnconfirmedStart\020\003\022\t\n\005Start\020\000\022"
    "\n\n\006Update\020\001\022\007\n\003End\020\002\032\036\n\nSleepEvent\022\020\n\010du"
    "ration\030\001 \002(\004B&\n\026org.mpisws.fog.ebncoreB\014"
    "EbNCoreProto", 852);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ebncore.proto", &protobuf_RegisterTypes);
  Event::default_instance_ = new Event();
  Event_LinkabilityEvent::default_instance_ = new Event_LinkabilityEvent();
  Event_LinkabilityEvent_Entry::default_instance_ = new Event_LinkabilityEvent_Entry();
  Event_EncounterEvent::default_instance_ = new Event_EncounterEvent();
  Event_EncounterEvent_RSSIEvent::default_instance_ = new Event_EncounterEvent_RSSIEvent();
  Event_SleepEvent::default_instance_ = new Event_SleepEvent();
  Event::default_instance_->InitAsDefaultInstance();
  Event_LinkabilityEvent::default_instance_->InitAsDefaultInstance();
  Event_LinkabilityEvent_Entry::default_instance_->InitAsDefaultInstance();
  Event_EncounterEvent::default_instance_->InitAsDefaultInstance();
  Event_EncounterEvent_RSSIEvent::default_instance_->InitAsDefaultInstance();
  Event_SleepEvent::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ebncore_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ebncore_2eproto {
  StaticDescriptorInitializer_ebncore_2eproto() {
    protobuf_AddDesc_ebncore_2eproto();
  }
} static_descriptor_initializer_ebncore_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Event_LinkabilityEvent_Entry_ModeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_LinkabilityEvent_Entry_ModeType_descriptor_;
}
bool Event_LinkabilityEvent_Entry_ModeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Event_LinkabilityEvent_Entry_ModeType Event_LinkabilityEvent_Entry::Listen;
const Event_LinkabilityEvent_Entry_ModeType Event_LinkabilityEvent_Entry::AdvertAndListen;
const Event_LinkabilityEvent_Entry_ModeType Event_LinkabilityEvent_Entry::ModeType_MIN;
const Event_LinkabilityEvent_Entry_ModeType Event_LinkabilityEvent_Entry::ModeType_MAX;
const int Event_LinkabilityEvent_Entry::ModeType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Event_LinkabilityEvent_Entry::kLinkValueFieldNumber;
const int Event_LinkabilityEvent_Entry::kModeFieldNumber;
#endif  // !_MSC_VER

Event_LinkabilityEvent_Entry::Event_LinkabilityEvent_Entry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Event_LinkabilityEvent_Entry::InitAsDefaultInstance() {
}

Event_LinkabilityEvent_Entry::Event_LinkabilityEvent_Entry(const Event_LinkabilityEvent_Entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Event_LinkabilityEvent_Entry::SharedCtor() {
  _cached_size_ = 0;
  linkvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Event_LinkabilityEvent_Entry::~Event_LinkabilityEvent_Entry() {
  SharedDtor();
}

void Event_LinkabilityEvent_Entry::SharedDtor() {
  if (linkvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete linkvalue_;
  }
  if (this != default_instance_) {
  }
}

void Event_LinkabilityEvent_Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event_LinkabilityEvent_Entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_LinkabilityEvent_Entry_descriptor_;
}

const Event_LinkabilityEvent_Entry& Event_LinkabilityEvent_Entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ebncore_2eproto();
  return *default_instance_;
}

Event_LinkabilityEvent_Entry* Event_LinkabilityEvent_Entry::default_instance_ = NULL;

Event_LinkabilityEvent_Entry* Event_LinkabilityEvent_Entry::New() const {
  return new Event_LinkabilityEvent_Entry;
}

void Event_LinkabilityEvent_Entry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_linkvalue()) {
      if (linkvalue_ != &::google::protobuf::internal::kEmptyString) {
        linkvalue_->clear();
      }
    }
    mode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Event_LinkabilityEvent_Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes linkValue = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_linkvalue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mode;
        break;
      }

      // required .EbNCore.Event.LinkabilityEvent.Entry.ModeType mode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EbNCore::Event_LinkabilityEvent_Entry_ModeType_IsValid(value)) {
            set_mode(static_cast< ::EbNCore::Event_LinkabilityEvent_Entry_ModeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Event_LinkabilityEvent_Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes linkValue = 1;
  if (has_linkvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->linkvalue(), output);
  }

  // required .EbNCore.Event.LinkabilityEvent.Entry.ModeType mode = 2;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->mode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Event_LinkabilityEvent_Entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes linkValue = 1;
  if (has_linkvalue()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->linkvalue(), target);
  }

  // required .EbNCore.Event.LinkabilityEvent.Entry.ModeType mode = 2;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->mode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Event_LinkabilityEvent_Entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes linkValue = 1;
    if (has_linkvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->linkvalue());
    }

    // required .EbNCore.Event.LinkabilityEvent.Entry.ModeType mode = 2;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event_LinkabilityEvent_Entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Event_LinkabilityEvent_Entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Event_LinkabilityEvent_Entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Event_LinkabilityEvent_Entry::MergeFrom(const Event_LinkabilityEvent_Entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_linkvalue()) {
      set_linkvalue(from.linkvalue());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Event_LinkabilityEvent_Entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event_LinkabilityEvent_Entry::CopyFrom(const Event_LinkabilityEvent_Entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event_LinkabilityEvent_Entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Event_LinkabilityEvent_Entry::Swap(Event_LinkabilityEvent_Entry* other) {
  if (other != this) {
    std::swap(linkvalue_, other->linkvalue_);
    std::swap(mode_, other->mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Event_LinkabilityEvent_Entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Event_LinkabilityEvent_Entry_descriptor_;
  metadata.reflection = Event_LinkabilityEvent_Entry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Event_LinkabilityEvent::kEntriesFieldNumber;
#endif  // !_MSC_VER

Event_LinkabilityEvent::Event_LinkabilityEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Event_LinkabilityEvent::InitAsDefaultInstance() {
}

Event_LinkabilityEvent::Event_LinkabilityEvent(const Event_LinkabilityEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Event_LinkabilityEvent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Event_LinkabilityEvent::~Event_LinkabilityEvent() {
  SharedDtor();
}

void Event_LinkabilityEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Event_LinkabilityEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event_LinkabilityEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_LinkabilityEvent_descriptor_;
}

const Event_LinkabilityEvent& Event_LinkabilityEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ebncore_2eproto();
  return *default_instance_;
}

Event_LinkabilityEvent* Event_LinkabilityEvent::default_instance_ = NULL;

Event_LinkabilityEvent* Event_LinkabilityEvent::New() const {
  return new Event_LinkabilityEvent;
}

void Event_LinkabilityEvent::Clear() {
  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Event_LinkabilityEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .EbNCore.Event.LinkabilityEvent.Entry entries = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_entries;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Event_LinkabilityEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .EbNCore.Event.LinkabilityEvent.Entry entries = 1;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entries(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Event_LinkabilityEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .EbNCore.Event.LinkabilityEvent.Entry entries = 1;
  for (int i = 0; i < this->entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entries(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Event_LinkabilityEvent::ByteSize() const {
  int total_size = 0;

  // repeated .EbNCore.Event.LinkabilityEvent.Entry entries = 1;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event_LinkabilityEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Event_LinkabilityEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Event_LinkabilityEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Event_LinkabilityEvent::MergeFrom(const Event_LinkabilityEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_.MergeFrom(from.entries_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Event_LinkabilityEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event_LinkabilityEvent::CopyFrom(const Event_LinkabilityEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event_LinkabilityEvent::IsInitialized() const {

  for (int i = 0; i < entries_size(); i++) {
    if (!this->entries(i).IsInitialized()) return false;
  }
  return true;
}

void Event_LinkabilityEvent::Swap(Event_LinkabilityEvent* other) {
  if (other != this) {
    entries_.Swap(&other->entries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Event_LinkabilityEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Event_LinkabilityEvent_descriptor_;
  metadata.reflection = Event_LinkabilityEvent_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* Event_EncounterEvent_EventType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_EncounterEvent_EventType_descriptor_;
}
bool Event_EncounterEvent_EventType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Event_EncounterEvent_EventType Event_EncounterEvent::UnconfirmedStart;
const Event_EncounterEvent_EventType Event_EncounterEvent::Start;
const Event_EncounterEvent_EventType Event_EncounterEvent::Update;
const Event_EncounterEvent_EventType Event_EncounterEvent::End;
const Event_EncounterEvent_EventType Event_EncounterEvent::EventType_MIN;
const Event_EncounterEvent_EventType Event_EncounterEvent::EventType_MAX;
const int Event_EncounterEvent::EventType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Event_EncounterEvent_RSSIEvent::kTimeFieldNumber;
const int Event_EncounterEvent_RSSIEvent::kRssiFieldNumber;
#endif  // !_MSC_VER

Event_EncounterEvent_RSSIEvent::Event_EncounterEvent_RSSIEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Event_EncounterEvent_RSSIEvent::InitAsDefaultInstance() {
}

Event_EncounterEvent_RSSIEvent::Event_EncounterEvent_RSSIEvent(const Event_EncounterEvent_RSSIEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Event_EncounterEvent_RSSIEvent::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_ULONGLONG(0);
  rssi_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Event_EncounterEvent_RSSIEvent::~Event_EncounterEvent_RSSIEvent() {
  SharedDtor();
}

void Event_EncounterEvent_RSSIEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Event_EncounterEvent_RSSIEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event_EncounterEvent_RSSIEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_EncounterEvent_RSSIEvent_descriptor_;
}

const Event_EncounterEvent_RSSIEvent& Event_EncounterEvent_RSSIEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ebncore_2eproto();
  return *default_instance_;
}

Event_EncounterEvent_RSSIEvent* Event_EncounterEvent_RSSIEvent::default_instance_ = NULL;

Event_EncounterEvent_RSSIEvent* Event_EncounterEvent_RSSIEvent::New() const {
  return new Event_EncounterEvent_RSSIEvent;
}

void Event_EncounterEvent_RSSIEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_ULONGLONG(0);
    rssi_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Event_EncounterEvent_RSSIEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rssi;
        break;
      }

      // required sint32 rssi = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rssi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &rssi_)));
          set_has_rssi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Event_EncounterEvent_RSSIEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time(), output);
  }

  // required sint32 rssi = 2;
  if (has_rssi()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->rssi(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Event_EncounterEvent_RSSIEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->time(), target);
  }

  // required sint32 rssi = 2;
  if (has_rssi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->rssi(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Event_EncounterEvent_RSSIEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // required sint32 rssi = 2;
    if (has_rssi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->rssi());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event_EncounterEvent_RSSIEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Event_EncounterEvent_RSSIEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Event_EncounterEvent_RSSIEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Event_EncounterEvent_RSSIEvent::MergeFrom(const Event_EncounterEvent_RSSIEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_rssi()) {
      set_rssi(from.rssi());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Event_EncounterEvent_RSSIEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event_EncounterEvent_RSSIEvent::CopyFrom(const Event_EncounterEvent_RSSIEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event_EncounterEvent_RSSIEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Event_EncounterEvent_RSSIEvent::Swap(Event_EncounterEvent_RSSIEvent* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(rssi_, other->rssi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Event_EncounterEvent_RSSIEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Event_EncounterEvent_RSSIEvent_descriptor_;
  metadata.reflection = Event_EncounterEvent_RSSIEvent_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Event_EncounterEvent::kTypeFieldNumber;
const int Event_EncounterEvent::kTimeFieldNumber;
const int Event_EncounterEvent::kIdFieldNumber;
const int Event_EncounterEvent::kAddressFieldNumber;
const int Event_EncounterEvent::kRssiEventsFieldNumber;
const int Event_EncounterEvent::kMatchingSetFieldNumber;
const int Event_EncounterEvent::kSharedSecretsFieldNumber;
const int Event_EncounterEvent::kPkidFieldNumber;
const int Event_EncounterEvent::kMatchingSetUpdatedFieldNumber;
#endif  // !_MSC_VER

Event_EncounterEvent::Event_EncounterEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Event_EncounterEvent::InitAsDefaultInstance() {
}

Event_EncounterEvent::Event_EncounterEvent(const Event_EncounterEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Event_EncounterEvent::SharedCtor() {
  _cached_size_ = 0;
  type_ = 3;
  time_ = GOOGLE_ULONGLONG(0);
  id_ = 0;
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pkid_ = GOOGLE_ULONGLONG(0);
  matchingsetupdated_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Event_EncounterEvent::~Event_EncounterEvent() {
  SharedDtor();
}

void Event_EncounterEvent::SharedDtor() {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (this != default_instance_) {
  }
}

void Event_EncounterEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event_EncounterEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_EncounterEvent_descriptor_;
}

const Event_EncounterEvent& Event_EncounterEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ebncore_2eproto();
  return *default_instance_;
}

Event_EncounterEvent* Event_EncounterEvent::default_instance_ = NULL;

Event_EncounterEvent* Event_EncounterEvent::New() const {
  return new Event_EncounterEvent;
}

void Event_EncounterEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 3;
    time_ = GOOGLE_ULONGLONG(0);
    id_ = 0;
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::kEmptyString) {
        address_->clear();
      }
    }
    pkid_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    matchingsetupdated_ = false;
  }
  rssievents_.Clear();
  matchingset_.Clear();
  sharedsecrets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Event_EncounterEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .EbNCore.Event.EncounterEvent.EventType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EbNCore::Event_EncounterEvent_EventType_IsValid(value)) {
            set_type(static_cast< ::EbNCore::Event_EncounterEvent_EventType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // required uint64 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // required int32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_address;
        break;
      }

      // required string address = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_rssiEvents;
        break;
      }

      // repeated .EbNCore.Event.EncounterEvent.RSSIEvent rssiEvents = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rssiEvents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rssievents()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_rssiEvents;
        if (input->ExpectTag(50)) goto parse_matchingSet;
        break;
      }

      // repeated bytes matchingSet = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_matchingSet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_matchingset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_matchingSet;
        if (input->ExpectTag(58)) goto parse_sharedSecrets;
        break;
      }

      // repeated bytes sharedSecrets = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sharedSecrets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_sharedsecrets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_sharedSecrets;
        if (input->ExpectTag(64)) goto parse_pkid;
        break;
      }

      // required uint64 pkid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pkid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pkid_)));
          set_has_pkid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_matchingSetUpdated;
        break;
      }

      // required bool matchingSetUpdated = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matchingSetUpdated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &matchingsetupdated_)));
          set_has_matchingsetupdated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Event_EncounterEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .EbNCore.Event.EncounterEvent.EventType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  // required int32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }

  // required string address = 4;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->address(), output);
  }

  // repeated .EbNCore.Event.EncounterEvent.RSSIEvent rssiEvents = 5;
  for (int i = 0; i < this->rssievents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->rssievents(i), output);
  }

  // repeated bytes matchingSet = 6;
  for (int i = 0; i < this->matchingset_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->matchingset(i), output);
  }

  // repeated bytes sharedSecrets = 7;
  for (int i = 0; i < this->sharedsecrets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->sharedsecrets(i), output);
  }

  // required uint64 pkid = 8;
  if (has_pkid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->pkid(), output);
  }

  // required bool matchingSetUpdated = 9;
  if (has_matchingsetupdated()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->matchingsetupdated(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Event_EncounterEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .EbNCore.Event.EncounterEvent.EventType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  // required int32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }

  // required string address = 4;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->address(), target);
  }

  // repeated .EbNCore.Event.EncounterEvent.RSSIEvent rssiEvents = 5;
  for (int i = 0; i < this->rssievents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->rssievents(i), target);
  }

  // repeated bytes matchingSet = 6;
  for (int i = 0; i < this->matchingset_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(6, this->matchingset(i), target);
  }

  // repeated bytes sharedSecrets = 7;
  for (int i = 0; i < this->sharedsecrets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(7, this->sharedsecrets(i), target);
  }

  // required uint64 pkid = 8;
  if (has_pkid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->pkid(), target);
  }

  // required bool matchingSetUpdated = 9;
  if (has_matchingsetupdated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->matchingsetupdated(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Event_EncounterEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .EbNCore.Event.EncounterEvent.EventType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // required int32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string address = 4;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

    // required uint64 pkid = 8;
    if (has_pkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pkid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bool matchingSetUpdated = 9;
    if (has_matchingsetupdated()) {
      total_size += 1 + 1;
    }

  }
  // repeated .EbNCore.Event.EncounterEvent.RSSIEvent rssiEvents = 5;
  total_size += 1 * this->rssievents_size();
  for (int i = 0; i < this->rssievents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rssievents(i));
  }

  // repeated bytes matchingSet = 6;
  total_size += 1 * this->matchingset_size();
  for (int i = 0; i < this->matchingset_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->matchingset(i));
  }

  // repeated bytes sharedSecrets = 7;
  total_size += 1 * this->sharedsecrets_size();
  for (int i = 0; i < this->sharedsecrets_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->sharedsecrets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event_EncounterEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Event_EncounterEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Event_EncounterEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Event_EncounterEvent::MergeFrom(const Event_EncounterEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  rssievents_.MergeFrom(from.rssievents_);
  matchingset_.MergeFrom(from.matchingset_);
  sharedsecrets_.MergeFrom(from.sharedsecrets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_pkid()) {
      set_pkid(from.pkid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_matchingsetupdated()) {
      set_matchingsetupdated(from.matchingsetupdated());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Event_EncounterEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event_EncounterEvent::CopyFrom(const Event_EncounterEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event_EncounterEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000018f) != 0x0000018f) return false;

  for (int i = 0; i < rssievents_size(); i++) {
    if (!this->rssievents(i).IsInitialized()) return false;
  }
  return true;
}

void Event_EncounterEvent::Swap(Event_EncounterEvent* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(time_, other->time_);
    std::swap(id_, other->id_);
    std::swap(address_, other->address_);
    rssievents_.Swap(&other->rssievents_);
    matchingset_.Swap(&other->matchingset_);
    sharedsecrets_.Swap(&other->sharedsecrets_);
    std::swap(pkid_, other->pkid_);
    std::swap(matchingsetupdated_, other->matchingsetupdated_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Event_EncounterEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Event_EncounterEvent_descriptor_;
  metadata.reflection = Event_EncounterEvent_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Event_SleepEvent::kDurationFieldNumber;
#endif  // !_MSC_VER

Event_SleepEvent::Event_SleepEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Event_SleepEvent::InitAsDefaultInstance() {
}

Event_SleepEvent::Event_SleepEvent(const Event_SleepEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Event_SleepEvent::SharedCtor() {
  _cached_size_ = 0;
  duration_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Event_SleepEvent::~Event_SleepEvent() {
  SharedDtor();
}

void Event_SleepEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Event_SleepEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event_SleepEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_SleepEvent_descriptor_;
}

const Event_SleepEvent& Event_SleepEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ebncore_2eproto();
  return *default_instance_;
}

Event_SleepEvent* Event_SleepEvent::default_instance_ = NULL;

Event_SleepEvent* Event_SleepEvent::New() const {
  return new Event_SleepEvent;
}

void Event_SleepEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    duration_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Event_SleepEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 duration = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Event_SleepEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 duration = 1;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->duration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Event_SleepEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 duration = 1;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->duration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Event_SleepEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 duration = 1;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->duration());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event_SleepEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Event_SleepEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Event_SleepEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Event_SleepEvent::MergeFrom(const Event_SleepEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_duration()) {
      set_duration(from.duration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Event_SleepEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event_SleepEvent::CopyFrom(const Event_SleepEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event_SleepEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Event_SleepEvent::Swap(Event_SleepEvent* other) {
  if (other != this) {
    std::swap(duration_, other->duration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Event_SleepEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Event_SleepEvent_descriptor_;
  metadata.reflection = Event_SleepEvent_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Event::kLinkabilityEventFieldNumber;
const int Event::kEncounterEventFieldNumber;
const int Event::kSleepEventFieldNumber;
#endif  // !_MSC_VER

Event::Event()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Event::InitAsDefaultInstance() {
  linkabilityevent_ = const_cast< ::EbNCore::Event_LinkabilityEvent*>(&::EbNCore::Event_LinkabilityEvent::default_instance());
  encounterevent_ = const_cast< ::EbNCore::Event_EncounterEvent*>(&::EbNCore::Event_EncounterEvent::default_instance());
  sleepevent_ = const_cast< ::EbNCore::Event_SleepEvent*>(&::EbNCore::Event_SleepEvent::default_instance());
}

Event::Event(const Event& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Event::SharedCtor() {
  _cached_size_ = 0;
  linkabilityevent_ = NULL;
  encounterevent_ = NULL;
  sleepevent_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Event::~Event() {
  SharedDtor();
}

void Event::SharedDtor() {
  if (this != default_instance_) {
    delete linkabilityevent_;
    delete encounterevent_;
    delete sleepevent_;
  }
}

void Event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_descriptor_;
}

const Event& Event::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ebncore_2eproto();
  return *default_instance_;
}

Event* Event::default_instance_ = NULL;

Event* Event::New() const {
  return new Event;
}

void Event::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_linkabilityevent()) {
      if (linkabilityevent_ != NULL) linkabilityevent_->::EbNCore::Event_LinkabilityEvent::Clear();
    }
    if (has_encounterevent()) {
      if (encounterevent_ != NULL) encounterevent_->::EbNCore::Event_EncounterEvent::Clear();
    }
    if (has_sleepevent()) {
      if (sleepevent_ != NULL) sleepevent_->::EbNCore::Event_SleepEvent::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .EbNCore.Event.LinkabilityEvent linkabilityEvent = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linkabilityevent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_encounterEvent;
        break;
      }

      // optional .EbNCore.Event.EncounterEvent encounterEvent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_encounterEvent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_encounterevent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sleepEvent;
        break;
      }

      // optional .EbNCore.Event.SleepEvent sleepEvent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sleepEvent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sleepevent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .EbNCore.Event.LinkabilityEvent linkabilityEvent = 1;
  if (has_linkabilityevent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->linkabilityevent(), output);
  }

  // optional .EbNCore.Event.EncounterEvent encounterEvent = 2;
  if (has_encounterevent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->encounterevent(), output);
  }

  // optional .EbNCore.Event.SleepEvent sleepEvent = 3;
  if (has_sleepevent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sleepevent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Event::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .EbNCore.Event.LinkabilityEvent linkabilityEvent = 1;
  if (has_linkabilityevent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->linkabilityevent(), target);
  }

  // optional .EbNCore.Event.EncounterEvent encounterEvent = 2;
  if (has_encounterevent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->encounterevent(), target);
  }

  // optional .EbNCore.Event.SleepEvent sleepEvent = 3;
  if (has_sleepevent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sleepevent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Event::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .EbNCore.Event.LinkabilityEvent linkabilityEvent = 1;
    if (has_linkabilityevent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->linkabilityevent());
    }

    // optional .EbNCore.Event.EncounterEvent encounterEvent = 2;
    if (has_encounterevent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->encounterevent());
    }

    // optional .EbNCore.Event.SleepEvent sleepEvent = 3;
    if (has_sleepevent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sleepevent());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Event* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Event*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_linkabilityevent()) {
      mutable_linkabilityevent()->::EbNCore::Event_LinkabilityEvent::MergeFrom(from.linkabilityevent());
    }
    if (from.has_encounterevent()) {
      mutable_encounterevent()->::EbNCore::Event_EncounterEvent::MergeFrom(from.encounterevent());
    }
    if (from.has_sleepevent()) {
      mutable_sleepevent()->::EbNCore::Event_SleepEvent::MergeFrom(from.sleepevent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Event::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {

  if (has_linkabilityevent()) {
    if (!this->linkabilityevent().IsInitialized()) return false;
  }
  if (has_encounterevent()) {
    if (!this->encounterevent().IsInitialized()) return false;
  }
  if (has_sleepevent()) {
    if (!this->sleepevent().IsInitialized()) return false;
  }
  return true;
}

void Event::Swap(Event* other) {
  if (other != this) {
    std::swap(linkabilityevent_, other->linkabilityevent_);
    std::swap(encounterevent_, other->encounterevent_);
    std::swap(sleepevent_, other->sleepevent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Event::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Event_descriptor_;
  metadata.reflection = Event_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace EbNCore

// @@protoc_insertion_point(global_scope)
